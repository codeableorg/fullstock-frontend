// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  password  String?
  isGuest   Boolean  @default(true) @map("is_guest")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp(0)

  carts  Cart[]
  orders Order[]

  @@map("users")
}

enum CategorySlug {
  polos
  tazas
  stickers
}

model Category {
  id          Int          @id @default(autoincrement())
  title       String
  slug        CategorySlug @unique
  imgSrc      String?      @map("img_src")
  alt         String?
  description String?
  createdAt   DateTime     @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt   DateTime     @default(now()) @map("updated_at") @db.Timestamp(0)

  products Product[]

  @@map("categories")
}

model Product {
  id          Int              @id @default(autoincrement())
  title       String
  imgSrc      String           @map("img_src")
  alt         String?
  price       Decimal          @db.Decimal(10, 2)
  description String?
  categoryId  Int?             @map("category_id")
  isOnSale    Boolean          @default(false) @map("is_on_sale")
  features    String[]
  createdAt   DateTime         @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt   DateTime         @default(now()) @map("updated_at") @db.Timestamp(0)
  variants    ProductVariant[]
  stickersVariants stickersVariant[]

  category   Category?   @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  cartItems  CartItem[]
  orderItems OrderItem[]

  @@map("products")
}

model ProductVariant {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  size      String // 'small', 'medium', 'large'

  cartItems CartItem[] @relation("CartItemToProductVariant")
}

model stickersVariant {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  measure      String // '3*3', '5*5', '10*10'
  price     Decimal  @db.Decimal(10, 2)

  cartItems CartItem[] @relation("CartItemTostickersVariant")
}

model Cart {
  id            Int      @id @default(autoincrement())
  sessionCartId String   @unique @default(dbgenerated("gen_random_uuid()")) @map("session_cart_id") @db.Uuid
  userId        Int?     @map("user_id")
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt     DateTime @default(now()) @map("updated_at") @db.Timestamp(0)

  user  User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  items CartItem[]

  @@map("carts")
}

model CartItem {
  id               Int      @id @default(autoincrement())
  cartId           Int
  productId        Int
  productVariantId Int?
  stickersVariantId Int?
  price     Decimal  @db.Decimal(10, 2)
  quantity         Int
  createdAt        DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt        DateTime @default(now()) @map("updated_at") @db.Timestamp(0)

  cart           Cart            @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product        Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  productVariant ProductVariant? @relation("CartItemToProductVariant", fields: [productVariantId], references: [id])
  stickersVariant stickersVariant? @relation("CartItemTostickersVariant", fields: [stickersVariantId], references: [id])

  @@unique([cartId, productId, productVariantId, stickersVariantId], name: "unique_cart_item")
  @@map("cart_items")
}

model Order {
  id          Int      @id @default(autoincrement())
  userId      Int      @map("user_id")
  totalAmount Decimal  @map("total_amount") @db.Decimal(10, 2)
  email       String
  paymentId   String?  @map("payment_id")
  firstName   String   @map("first_name")
  lastName    String   @map("last_name")
  company     String?
  address     String
  city        String
  country     String
  region      String
  zip         String
  phone       String
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt   DateTime @default(now()) @map("updated_at") @db.Timestamp(0)

  user  User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int      @map("order_id")
  productId Int?     @map("product_id")
  quantity  Int
  title     String
  price     Decimal  @db.Decimal(10, 2)
  imgSrc    String?  @map("img_src")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp(0)

  order   Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product? @relation(fields: [productId], references: [id], onDelete: SetNull)

  @@map("order_items")
}
